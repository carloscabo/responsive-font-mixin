$small_desktop: 1240px;
$tablet: 1023px;
$mobile: 767px;
$small_mobile: 360px;

// Responsive breakpoints
@mixin media($breakpoint) {
  @media only screen and (max-width: $breakpoint) {
    @content;
  }
}

@mixin autoscale-font (
  $list_of_breakpoints_and_sizes,
  $debug: false
) {

  /* Used to store previous breakpoint values */
  $prev-sz: '';
  $prev-lh: '';

  /* Create a list of breakpoints only */
  $bps: ();
  @each $lbpas in $list_of_breakpoints_and_sizes {
    $bp: nth($lbpas, 1);
    @if type-of($bp) == 'number' and not unitless($bp) {
      $bp: $bp / ($bp * 0 + 1);
    }
    $bps: append( $bps, $bp);
  }

  /* From this point the relues / calcs are created */
  $current_idx: 1;
  @each $lbpas in $list_of_breakpoints_and_sizes {

    $bp: nth($lbpas, 1); // Breakpoint
    // Remove bp unit
    @if type-of($bp) == 'number' and not unitless($bp) {
      $bp: $bp / ($bp * 0 + 1);
    }
    // If its not the last item we get size al lineheighgt
    // else
    @if $lbpas == nth($list_of_breakpoints_and_sizes, length($list_of_breakpoints_and_sizes)) {
      $sz: $prev-sz;
      $lh: $prev-lh;
    } @else {
      $sz: nth($lbpas, 2); // Size
      $lh: nth($lbpas, 3); // Line height
    }

    // First rule
    // Default size on desktop
    @if $lbpas == nth($list_of_breakpoints_and_sizes, 1) {
      & {
        font-size: #{$sz}px;
        line-height: #{$lh}px;

        /* Random color */
        @if $debug {
          $red:   random(256)-1;
          $green: random(256)-1;
          $blue:  random(256)-1;
          color: unquote("rgb(#{$red}, #{$green}, #{$blue})");
        }

      }
    }

    // Not the first, neither last
    @if $lbpas != nth($list_of_breakpoints_and_sizes, 1) and $lbpas != nth($list_of_breakpoints_and_sizes, length($list_of_breakpoints_and_sizes)) {

      $bp-prev:    nth( $bps, $current_idx - 1 );
      $bp-current: nth( $bps, $current_idx );
      $bp-next:    nth( $bps, $current_idx + 1 );

      @media only screen and (max-width: #{$bp}px) {
        & {

          /* Font size */
          font-size: #{$sz}px;
          font-size: calc( #{$sz}px + ( #{$prev-sz} - #{$sz} ) * ( ( 100vw - #{$bp-next}px ) / ( #{$bp} - #{$bp-next} ) ) );
          /* font-size: calc( 24px + ( 64 - 24 ) * ( ( 100vw - 768px ) / ( 1024 - 768 ) ) ); */

          /* Lineheight */
          line-height: #{$lh}px;
          line-height: calc( #{$lh}px + ( #{$prev-lh} - #{$lh} ) * ( ( 100vw - #{$bp-next}px ) / ( #{$bp} - #{$bp-next} ) ) );

          /* Random color */
          @if $debug {
            $red:   random(256)-1;
            $green: random(256)-1;
            $blue:  random(256)-1;
            color: unquote("rgb(#{$red}, #{$green}, #{$blue})");
          }

        }
      }
    }

    // Is last item of list
    @if $lbpas == nth($list_of_breakpoints_and_sizes, length($list_of_breakpoints_and_sizes)) {
      @media only screen and (max-width: #{$bp}px) {
        & {
          font-size: #{$sz}px;
          line-height: #{$lh}px;

          /* Random color */
          @if $debug {
            $red:   random(256)-1;
            $green: random(256)-1;
            $blue:  random(256)-1;
            color: unquote("rgb(#{$red}, #{$green}, #{$blue})");
          }

        }
      }
    } // @if

    $prev-sz: $sz;
    $prev-lh: $lh;
    $current_idx: $current_idx + 1;

  } // @each

}
